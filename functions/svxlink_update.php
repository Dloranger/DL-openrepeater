 <?php
# Copyright Â©2018 - Aaron Crawford, N3MBH - info(at)openrepeater(dot)com
# Licended under GPL v2 or later

/*
This script reads settings from the OpenRepeater database and builds new configuration
files for SVXLink. It currently builds the following configuration files:
- svxlink.conf
- ModuleEchoLink.conf
- local TCL overrides
- svxlink_gpio.conf
*/

/* ---------------------------------------------------------- */
/* SESSION CHECK TO SEE IF USER IS LOGGED IN. */
session_start();
if ((!isset($_SESSION['username'])) || (!isset($_SESSION['userID']))){
	header('location: login.php');
} else { // If they are, show the page.
/* ---------------------------------------------------------- */

// Generate header warning message for top of ALL files output by this script
$orpFileHeader = "
###############################################################################
#
#  OPENREPEATER / SVXLINK CONFIGURATION FILE
#  This file was auto generated by OpenRepeater. 
#  DO NOT MAKE CHANGES IN THIS FILE AS THEY WILL BE OVERWRITTEN
#
###############################################################################\n\n";

// Declare Config Arrays
$config_array = array();
$config_array['GLOBAL'] = array(); // Declare empty for prioritization

// Get Settings from SQLite
include_once("../includes/get_settings.php");

// Get Modules from SQLite
include_once("../includes/get_modules.php");

// Get Port Settings from SQLite
include_once("../includes/get_ports.php");

// Get GPIOs from SQLite that need to be set for OS (/sys/class/gpio/)
include_once("../includes/get_gpios.php");

/* ---------------------------------------------------------- */
/* --- FUNCTIONS --- */

include('svxlink_update_functions/functions.php');

/* ---------------------------------------------------------- */
/* --- BUILD MODULE SETTINGS --- */

include('svxlink_update_functions/modules_build_configs.php');

/* ---------------------------------------------------------- */
/* --- PORT SETTINGS - Generates RX & TX sections for each port --- */

foreach ($ports as $key => $val) {
	$config_array['Rx'.$key] = built_rx($key, $ports);
	$config_array['Tx'.$key] = built_tx($key, $ports, $settings);
}

// Note that while this section can build multipe TX & RX sections from ports table, there is no utilization of this feature yet in other logic.

/* ---------------------------------------------------------- */
/* --- LOGIC SETTINGS --- */



	switch ($settings['orp_Mode']) {
	    case "repeater":
			$useLogic = 'RepeaterLogic';
			include('svxlink_update_functions/main_repeater_logic.php');
	        break;
	    case "simplex":
			$useLogic = 'SimplexLogic';
			include('svxlink_update_functions/main_simplex_logic.php');
	        break;
	}

/*
include('svxlink_update_functions/main_link_logic.php');
$svx_logic .= $svx_link_logic; // Append link logic to repeater logic
*/


/* --- GLOBAL SETTINGS --- */
	// If there are Link Sections, append to included logics
	if ($logicsArrayLinks) {
		$useLogic .= ",".implode(",", $logicsArrayLinks);		
	}

	
	$config_array['GLOBAL']['MODULE_PATH'] = '/usr/lib/arm-linux-gnueabihf/svxlink';
	$config_array['GLOBAL']['LOGICS'] = $useLogic;
	$config_array['GLOBAL']['CFG_DIR'] = 'svxlink.d';
	$config_array['GLOBAL']['TIMESTAMP_FORMAT'] = '"%c"';
	$config_array['GLOBAL']['CARD_SAMPLE_RATE'] = '16000';
	//$config_array['GLOBAL']['LOCATION_INFO'] = 'LocationInfo';
	//$config_array['GLOBAL']['LINKS'] = 'LinkToR4';

	

/* ---------------------------------------------------------- */
/* BUILD CUSTOM TCL OVERRIDES...ie COURTESY TONES, IDENTIFICATION, ETC */

// Define Strings Variables for TCL Namespaces. 
$tclLogicNameSpace = '';
$tclRepeaterLogicNameSpace = '';

// Include PHP files that build custom TCL Logic for the namespaces below
include('svxlink_update_functions/tcl_identification.php');
include('svxlink_update_functions/tcl_courtesy_tones.php');
include('svxlink_update_functions/tcl_TEMP.php');

// TCL Logic Namespace Override
$tclOverride = '
### Overridden Core Logic event handlers created by OpenRepeater
namespace eval Logic {
' . $tclLogicNameSpace . '
# end of namespace
}


### Overridden Repeater Logic event handlers created by OpenRepeater
namespace eval RepeaterLogic {
' . $tclRepeaterLogicNameSpace . '
# end of namespace
}

';

/*
namespace eval EchoLink {

		# Executed when an incoming connection is accepted
		proc remote_greeting {call} {
			playSilence 1000;
			playFile "/usr/share/svxlink/sounds/en_US/EchoLink/greeting.wav"
#			playMsg "greeting";
		}

 end of namespace
}
*/

/* ---------------------------------------------------------- */
/* WRITE GPIO CONFIGURATION FILE */

// Define GPIO pin arrays
$gpioInHighArray = array();
$gpioInLowArray = array();
$gpioOutHighArray = array();
$gpioOutLowArray = array();

// Loop through each GPIO in database and assign to appropriate arrays
foreach ($gpio as $key => $val) {	
	if ($gpio[$key]['direction'] == "in") {
		if ($gpio[$key]['active'] == "low") {
			$gpioInLowArray[] = $gpio[$key]['gpio_num'];		
		} else {
			$gpioInHighArray[] = $gpio[$key]['gpio_num'];					
		}
	}

	if ($gpio[$key]['direction'] == "out") {
		if ($gpio[$key]['active'] == "low") {
			$gpioOutLowArray[] = $gpio[$key]['gpio_num'];		
		} else {
			$gpioOutHighArray[] = $gpio[$key]['gpio_num'];					
		}
	}

}

// Reformat arrays into space delminated lists of gpio pin numbers
$gpioInHighString = implode(" ", $gpioInHighArray);
$gpioInLowString = implode(" ", $gpioInLowArray);
$gpioOutHighString = implode(" ", $gpioOutHighArray);
$gpioOutLowString = implode(" ", $gpioOutLowArray);

// Build File Contents
$gpioConfigFile = '
	###############################################################################
	#
	# Configuration file for the SvxLink server GPIO Pins
	#
	###############################################################################

	# GPIO system pin path
	# RPi/odroid/nanopi/pine64 = /sys/class/gpio, orangpi = /sys/class/gpio_sw	
	GPIO_PATH=/sys/class/gpio

	# Space separated list of GPIO pins that point IN and have an
	# Active HIGH state (3.3v = ON, 0v = OFF)
	GPIO_IN_HIGH="'.$gpioInHighString.'"

	# Space separated list of GPIO pins that point IN and have an
	# Active LOW state (0v = ON, 3.3v = OFF)
	GPIO_IN_LOW="'.$gpioInLowString.'"

	# Space separated list of GPIO pins that point OUT and have an
	# Active HIGH state (3.3v = ON, 0v = OFF)
	GPIO_OUT_HIGH="'.$gpioOutHighString.'"

	# Space separated list of GPIO pins that point OUT and have an
	# Active LOW state (0v = ON, 3.3v = OFF)
	GPIO_OUT_LOW="'.$gpioOutLowString.'"

	# User that should own the GPIO device files
	GPIO_USER="svxlink"

	# Group for the GPIO device files
	GPIO_GROUP="daemon"

	# File access mode for the GPIO device files
	GPIO_MODE="0664"
';	

// TODO: Need to add function to check existing GPIO pins in /sys/class/gpio 
// and see if new pins in ports table exist since system boot and if not add them.

#Clean up tabs/white spaces
$gpioConfigFile = trim(preg_replace('/\t+/', '', $gpioConfigFile));

/* ---------------------------------------------------------- */
/* WRITE CONFIGURATION & TCL FILES */

if ($settings['orp_Mode'] == 'advanced') {
	// Process advanced mode overrides
	include_once("../includes/get_advanced.php");

	file_put_contents('/etc/openrepeater/svxlink/svxlink.conf', $advanced['svxlink_config']); // Overridden svxlink.confg
// 	file_put_contents('/etc/openrepeater/svxlink/local-events.d/CustomLogic.tcl', $orpFileHeader . $tclOverride); // Standard custom TCL
	unlink('/etc/openrepeater/svxlink/local-events.d/CustomLogic.tcl'); // Delete custom TCL overrides if they exist
	file_put_contents('/etc/openrepeater/svxlink/gpio.conf', $advanced['gpio_config']); // Overridden GPIO config

} else {
	// Otherwise process as usual
	file_put_contents('/etc/openrepeater/svxlink/svxlink.conf', $orpFileHeader . build_ini($config_array));
	file_put_contents('/etc/openrepeater/svxlink/local-events.d/CustomLogic.tcl', $orpFileHeader . $tclOverride);
	file_put_contents('/etc/openrepeater/svxlink/gpio.conf', $orpFileHeader . $gpioConfigFile);	
}




// echo '<pre>' . $orpFileHeader . build_ini($config_array) . '</pre>';


/* CLOSE DATABSE CONNECTION */
$dbConnection->close();


/* CLEAR SETTINGS UPDATE FLAG TO CLEAR BANNER AT TOP OF PAGE */
$memcache_obj = new Memcache;
$memcache_obj->connect('localhost', 11211);
$memcache_obj->set('update_settings_flag', 0, false, 0);

$shellout = shell_exec('sudo /usr/sbin/orp_helper svxlink restart');

/* WHAT PAGE TO GO BACK TO */
if ($_POST["return_url"]) {
	// Return to page that sent here
	$url = strtok($_POST["return_url"], '?'); //Clean parameters from URL
	header('location: '.$url);	
} else if (isset($_SESSION["new_repeater_settings"])) {
	// Wizard was run. Go ahead and destroy session and logout
	session_destroy();
	header('location: ../login.php');		
} else {
	// Otherwise just go to dashboard
	header('location: ../dashboard.php');	
}	
?>

<?php
/* ---------------------------------------------------------- */
// SESSION CHECK TO SEE IF USER IS LOGGED IN.
 } // close ELSE to end login check from top of page
/* ---------------------------------------------------------- */
?>
